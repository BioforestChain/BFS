// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios16.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FaviconFinderFramework
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import Swift
import SwiftSoup
import UIKit/*.UIKit*/
import UIKit
import _Concurrency
import _StringProcessing
extension Foundation.URL {
  public var tlds: [Swift.String] {
    get
  }
  public var absoluteStringWithoutScheme: Swift.String? {
    get
  }
  public var urlWithoutSubdomains: Foundation.URL? {
    get
  }
}
public enum FaviconError : Swift.Error {
  case emptyData
  case failedToParseHTML
  case failedToFindFavicon
  case failedToDownloadFavicon
  case emptyFavicon
  case invalidImage
  case other
  case failedToFindWebApplicationManifestFile
  case failedToDownloadWebApplicationManifestFile
  case failedToParseWebApplicationManifestFile
  public static func == (a: FaviconFinderFramework.FaviconError, b: FaviconFinderFramework.FaviconError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Swift.String {
  public mutating func removeEverythingAfter(str: Swift.String)
}
public enum FaviconType : Swift.String {
  case appleTouchIcon
  case appleTouchIconPrecomposed
  case shortcutIcon
  case icon
  case ico
  case launcherIcon1x
  case launcherIcon2x
  case launcherIcon3x
  case launcherIcon4x
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum FaviconDownloadType {
  case html
  case ico
  case webApplicationManifestFile
  public static func == (a: FaviconFinderFramework.FaviconDownloadType, b: FaviconFinderFramework.FaviconDownloadType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias FaviconImage = UIKit.UIImage
@objc public class FaviconFinder : ObjectiveC.NSObject {
  public init(url: Foundation.URL, preferredType: FaviconFinderFramework.FaviconDownloadType = .html, preferences: [FaviconFinderFramework.FaviconDownloadType : Swift.String] = [:], checkForMetaRefreshRedirect: Swift.Bool = false, downloadImage: Swift.Bool = true, logEnabled: Swift.Bool = false)
  #if compiler(>=5.3) && $AsyncAwait
  public func downloadFavicon() async throws -> FaviconFinderFramework.Favicon
  #endif
  @objc deinit
}
public struct Favicon {
  public let image: FaviconFinderFramework.FaviconImage
  public let data: Foundation.Data
  public let url: Foundation.URL
  public let type: FaviconFinderFramework.FaviconType
  public let downloadType: FaviconFinderFramework.FaviconDownloadType
}
extension FaviconFinderFramework.FaviconError : Swift.Equatable {}
extension FaviconFinderFramework.FaviconError : Swift.Hashable {}
extension FaviconFinderFramework.FaviconType : Swift.Equatable {}
extension FaviconFinderFramework.FaviconType : Swift.Hashable {}
extension FaviconFinderFramework.FaviconType : Swift.RawRepresentable {}
extension FaviconFinderFramework.FaviconDownloadType : Swift.Equatable {}
extension FaviconFinderFramework.FaviconDownloadType : Swift.Hashable {}
