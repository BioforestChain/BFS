// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios16.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BrowserFramework
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import FaviconFinder
import Foundation
import Kingfisher
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
extension SwiftUI.View {
  public func animationObserver<Value>(for value: Value, onChange: ((Value) -> Swift.Void)? = nil, onComplete: (() -> Swift.Void)? = nil) -> some SwiftUI.View where Value : SwiftUI.VectorArithmetic
  
}
extension SwiftUI.View {
  public func myAnimationObserver(for value: Swift.Int, onChange: ((Swift.Int) -> Swift.Void)? = nil, onComplete: (() -> Swift.Void)? = nil) -> some SwiftUI.View
  
}
@_inheritsConvenienceInitializers @objc(BrowserManager) public class BrowserManager : ObjectiveC.NSObject {
  @objc public var swiftView: UIKit.UIView?
  @objc public var webViewList: [WebKit.WKWebView]? {
    @objc get
    @objc set
  }
  @objc public var onValueChanged: (([WebKit.WKWebView]) -> Swift.Void)?
  @objc override dynamic public init()
  @objc deinit
}
