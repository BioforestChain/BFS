package info.bagen.dwebbrowser.microService.ipc

import android.content.Context
import org.chromium.net.CronetEngine


/**
 * Class controlling singleton instance of the CronetEngine. Ensures at most one instance of the
 * CronetEngine is created.
 */
// NOTE: This is a standalone class and not a memoized supplier as the CronetEngine creations
// requires a parameter, namedly a Context reference.
object CronetEngineSingleton {
    @Volatile
    private var cronetEngineSingleton: CronetEngine? = null
    fun getSingleton(context: Context): CronetEngine? {

        // Lazily create the engine.
        if (cronetEngineSingleton == null) {
            synchronized(CronetEngineSingleton::class.java) {
                // have to re-check since this might have changed before synchronization, but we don't
                // want to synchronize just to check for null.
                if (cronetEngineSingleton == null) {
                    cronetEngineSingleton =
                        createEngine(context)
                }
            }
        }
        return cronetEngineSingleton
    }

    private fun createEngine(context: Context): CronetEngine {
        return CronetEngine.Builder(context)
            .enableHttpCache(CronetEngine.Builder.HTTP_CACHE_DISABLED, 0)
            .enableHttp2(true)
            .enableQuic(false)
            .build()
    }
}
