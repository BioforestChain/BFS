function prepareInWorker(t){if(typeof window!="object")return{toMainChannel:self,isWorker:!0};{const a=document.currentScript??[].slice.call(document.querySelectorAll("[data-worker-id]")).find(e=>e.src==t),n=a.dataset.workerId;delete a.dataset.workerId;const r=window[n];return delete window[n],{toMainChannel:r.toMainPort,isWorker:!1}}}const calcFitSize=(t,a)=>{const n=t.width/t.height,r=a.width/n;let e=a.width,o=r;return o>a.height&&(e=a.height*n,o=a.height),{width:e,height:o}},svgToBlob=(()=>{const t=async()=>{Object.assign(self,{global:self});const{DOMParser:e}=await import("./dom-parser-34c1e941.js").then(function(l){return l.d}),{Canvg:o,presets:s}=await import("./index-c69bfd0a.js"),i=s.offscreen({DOMParser:e}),c=new OffscreenCanvas(128,128),w=c.getContext("2d");return{Canvg:o,preset:i,canvas:c,ctx:w,DOMParser:e}};let a;const n=()=>a??(a=t()),r=e=>{const o=e.document.documentElement,s=o.getAttribute("width",!0),i=o.getAttribute("height",!0),c=o.getAttribute("viewBox"),w=s.getNumber(0),l=i.getNumber(0),h=800,d=600,g=c.getValue("0,0,512,512").split(/[\s,]/);return{width:w||+g[2]||h,height:l||+g[3]||d}};return async(e,o)=>{const{Canvg:s,preset:i,canvas:c,ctx:w}=await n(),l=await s.from(w,e,i),h=r(l),d=calcFitSize(h,o);return l.resize(d.width,d.height,!0),await l.render(),await c.convertToBlob()}})(),{toMainChannel,isWorker}=prepareInWorker(import.meta.url);(async()=>{let wsUrl=null,proxyUrl=null;const canvas=await new Promise(t=>toMainChannel.addEventListener("message",a=>{const{canvas:n,width:r,height:e,wsUrl:o,proxyUrl:s}=a.data;n.width=r,n.height=e,t(n),wsUrl=o||null,proxyUrl=s||null},{once:!0})),ctx=canvas.getContext("2d"),wrapUrlByProxy=t=>{if(!proxyUrl||/^(data|blob):/.test(t))return t;const a=new URL(proxyUrl);return a.searchParams.set("url",t),a.href},fetchImageBitmap=async(t,a,n)=>{a=Math.min(a,8192),n=Math.min(n,8192);let r,e=!0;if(typeof Image=="function"){const s=new Image;r=s,s.src=t,await new Promise((i,c)=>{s.onload=i,s.onerror=c})}else{const s=await fetch(t);if(s.status!==200)throw new Error(`network error:${s.statusText}
${await s.text()}`);if(s.headers.get("Content-Type")?.includes("image/svg+xml")){const i=await s.text();r=await svgToBlob(i,{width:a,height:n}),e=!1}else r=await s.blob()}let o=await createImageBitmap(r);if(e){const s=calcFitSize(o,{width:a,height:n});o.width>s.width&&(o=await createImageBitmap(o,{resizeWidth:s.width,resizeHeight:s.height}))}return o},canvasToDataURL=async(t,a)=>"toDataURL"in t?await t.toDataURL(a?.type,a?.quality):await blobToDataURL(await t.convertToBlob(a)),canvasToBlob=(t,a)=>"toBlob"in t?new Promise((n,r)=>{t.toBlob(e=>{e?n(e):r("fail to blob")},a?.type,a?.quality)}):t.convertToBlob(a),blobToDataURL=t=>new Promise((a,n)=>{const r=new FileReader;r.onload=()=>a(r.result),r.onerror=n,r.readAsDataURL(t)}),AsyncFunction=eval("(async()=>{}).constructor"),isWsBinary=t=>t instanceof Blob||ArrayBuffer.isView(t)||t instanceof ArrayBuffer,evalCode=async(t,a,n)=>{try{const r=await new AsyncFunction("canvas,ctx,fetchImageBitmap,blobToDataURL,canvasToDataURL,canvasToBlob,wrapUrlByProxy",a)(canvas,ctx,fetchImageBitmap,blobToDataURL,canvasToDataURL,canvasToBlob,wrapUrlByProxy);let e;switch(t){case"json":e=JSON.stringify(r);break;case"binary":if(isWsBinary(r))e=r;else throw new TypeError(`invalid binary type for result: ${e}`);break;case"string":e=String(r);break;default:}n(void 0,e)}catch(r){console.error(a,r),n(String(r),void 0)}};if(Object.assign(self,{evalCode,canvas,ctx,fetchImageBitmap,blobToDataURL,canvasToBlob,canvasToDataURL,wrapUrlByProxy}),wsUrl){const t=new WebSocket(wsUrl);t.onopen=async()=>{console.info("ready for reander")};const a=e=>(console.log("start eval code:",e.rid,e.runCode),evalCode(e.returnType,e.runCode,(o,s)=>{try{o===void 0?s!==void 0?(t.send(`${e.rid}:return:`),t.send(s)):t.send(`${e.rid}:void`):t.send(`${e.rid}:throw:${o}`)}catch(i){t.send(`${e.rid}:throw:${String(i)}`)}}));let n;const r=e=>{n?n=n.finally(()=>a(e)):n=a(e)};t.onmessage=async e=>{const o=JSON.parse(e.data);r(o)}}else{console.log("start tests");const t=async()=>(canvas.width=300,canvas.height=300,{width:canvas.width,height:canvas.height}),a=async()=>{const n=await fetchImageBitmap("https://upload.wikimedia.org/wikipedia/commons/5/55/John_William_Waterhouse_A_Mermaid.jpg",100,100);return ctx.drawImage(n,0,0),await canvasToDataURL(canvas)};for(const[n,r]of new Map([[t,"json"],[a,"string"]]))await evalCode(r,n.toString().match(/\{([\w\W]+)\}/)[1],(e,o)=>e?console.error(n.name,e):console.log(n.name,o))}})().catch(console.error);
