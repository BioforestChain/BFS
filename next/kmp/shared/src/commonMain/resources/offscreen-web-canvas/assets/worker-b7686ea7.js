function prepareInWorker(t){if(typeof window!="object")return{toMainChannel:self,isWorker:!0};{const a=document.currentScript??[].slice.call(document.querySelectorAll("[data-worker-id]")).find(e=>e.src==t),r=a.dataset.workerId;delete a.dataset.workerId;const n=window[r];return delete window[r],{toMainChannel:n.toMainPort,isWorker:!1}}}const svgToBlob=(()=>{const t=async()=>{Object.assign(self,{global:self});const{DOMParser:e}=await import("./dom-parser-34c1e941.js").then(function(l){return l.d}),{Canvg:o,presets:s}=await import("./index-c69bfd0a.js"),i=s.offscreen({DOMParser:e}),c=new OffscreenCanvas(128,128),w=c.getContext("2d");return{Canvg:o,preset:i,canvas:c,ctx:w,DOMParser:e}};let a;const r=()=>a??(a=t()),n=e=>{const o=e.document.documentElement,s=o.getAttribute("width",!0),i=o.getAttribute("height",!0),c=o.getAttribute("viewBox"),w=s.getNumber(0),l=i.getNumber(0),h=800,g=600,d=c.getValue("0,0,512,512").split(/[\s,]/);return{width:w||+d[2]||h,height:l||+d[3]||g}};return async(e,o)=>{const{Canvg:s,preset:i,canvas:c,ctx:w}=await r(),l=await s.from(w,e,i);return n(l),o&&l.resize(o.width,o.height,!0),await l.render(),await c.convertToBlob()}})(),calcFitSize=(t,a)=>{const r=t.width/t.height,n=a.width/r;let e=a.width,o=n;return o>a.height&&(e=a.height*r,o=a.height),{width:e,height:o}},{toMainChannel,isWorker}=prepareInWorker(import.meta.url);(async()=>{let wsUrl=null,proxyUrl=null;const canvas=await new Promise(t=>toMainChannel.addEventListener("message",a=>{const{canvas:r,width:n,height:e,wsUrl:o,proxyUrl:s}=a.data;r.width=n,r.height=e,t(r),wsUrl=o||null,proxyUrl=s||null},{once:!0})),ctx=canvas.getContext("2d"),wrapUrlByProxy=t=>{if(!proxyUrl||!t.startsWith("http"))return t;const a=new URL(proxyUrl);return a.searchParams.set("url",t),a.href},fetchImageBitmap=async(t,a,r)=>{a=Math.min(a,8192),r=Math.min(r,8192);let n,e=!0;if(typeof Image=="function"){const s=new Image;n=s,s.src=t,await new Promise((i,c)=>{s.onload=i,s.onerror=c})}else{const s=await fetch(t);if(s.status!==200)throw new Error(`network error:${s.statusText}
${await s.text()}`);if(s.headers.get("Content-Type")?.includes("image/svg+xml")){const i=await s.text();n=await svgToBlob(i,{width:a,height:r}),e=!1}else n=await s.blob()}let o=await createImageBitmap(n);if(e){const s=calcFitSize(o,{width:a,height:r});o.width>s.width&&(o=await createImageBitmap(o,{resizeWidth:s.width,resizeHeight:s.height}))}return o},canvasToDataURL=async(t,a)=>"toDataURL"in t?await t.toDataURL(a?.type,a?.quality):await blobToDataURL(await t.convertToBlob(a)),canvasToBlob=(t,a)=>"toBlob"in t?new Promise((r,n)=>{t.toBlob(e=>{e?r(e):n("fail to blob")},a?.type,a?.quality)}):t.convertToBlob(a),blobToDataURL=t=>new Promise((a,r)=>{const n=new FileReader;n.onload=()=>a(n.result),n.onerror=r,n.readAsDataURL(t)}),AsyncFunction=eval("(async()=>{}).constructor"),isWsBinary=t=>t instanceof Blob||ArrayBuffer.isView(t)||t instanceof ArrayBuffer,evalCode=async(t,a,r)=>{try{const n=await new AsyncFunction("canvas,ctx,fetchImageBitmap,blobToDataURL,canvasToDataURL,canvasToBlob,wrapUrlByProxy",a)(canvas,ctx,fetchImageBitmap,blobToDataURL,canvasToDataURL,canvasToBlob,wrapUrlByProxy);let e;switch(t){case"json":e=JSON.stringify(n);break;case"binary":if(isWsBinary(n))e=n;else throw new TypeError(`invalid binary type for result: ${e}`);break;case"string":e=String(n);break;default:}r(void 0,e)}catch(n){console.error(a,n),r(String(n),void 0)}};if(Object.assign(self,{evalCode,canvas,ctx,fetchImageBitmap,blobToDataURL,canvasToBlob,canvasToDataURL,wrapUrlByProxy}),wsUrl){const t=new WebSocket(wsUrl);t.onopen=async()=>{console.info("ready for reander")};const a=e=>(console.log("start eval code:",e.rid,e.runCode),evalCode(e.returnType,e.runCode,(o,s)=>{try{o===void 0?s!==void 0?(t.send(`${e.rid}:return:`),t.send(s)):t.send(`${e.rid}:void`):t.send(`${e.rid}:throw:${o}`)}catch(i){t.send(`${e.rid}:throw:${String(i)}`)}}));let r;const n=e=>{r?r=r.finally(()=>a(e)):r=a(e)};t.onmessage=async e=>{const o=JSON.parse(e.data);n(o)}}else{console.log("start tests");const t=async()=>(canvas.width=300,canvas.height=300,{width:canvas.width,height:canvas.height}),a=async()=>{const r=await fetchImageBitmap("https://upload.wikimedia.org/wikipedia/commons/5/55/John_William_Waterhouse_A_Mermaid.jpg",100,100);return ctx.drawImage(r,0,0),await canvasToDataURL(canvas)};for(const[r,n]of new Map([[t,"json"],[a,"string"]]))await evalCode(n,r.toString().match(/\{([\w\W]+)\}/)[1],(e,o)=>e?console.error(r.name,e):console.log(r.name,o))}})().catch(console.error);
