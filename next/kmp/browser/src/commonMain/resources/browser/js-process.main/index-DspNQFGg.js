(function(){const n=document.createElement("link").relList;if(n&&n.supports&&n.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))t(s);new MutationObserver(s=>{for(const r of s)if(r.type==="childList")for(const i of r.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&t(i)}).observe(document,{childList:!0,subtree:!0});function e(s){const r={};return s.integrity&&(r.integrity=s.integrity),s.referrerPolicy&&(r.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?r.credentials="include":s.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function t(s){if(s.ep)return;s.ep=!0;const r=e(s);fetch(s.href,r)}})();const m=n=>new y(n);class y{constructor(e=!0){this._cbs=new Set,this._started=!1,this._cachedActions=[],this.listen=t=>(this._cbs.add(t),this._start(),()=>this._cbs.delete(t)),this.emit=(...t)=>{this._startAction(()=>{this._emit(t,this._cbs)})},this.emitAndClear=(...t)=>{this._startAction(()=>{const s=[...this._cbs];this._cbs.clear(),this._emit(t,s)})},this.clear=()=>{this._startAction(()=>{this._cbs.clear()})},e&&this._start()}_start(){if(!this._started&&(this._started=!0,this._cachedActions.length)){for(const e of this._cachedActions)e();this._cachedActions.length=0}}_startAction(e){this._started?e():this._cachedActions.push(e)}_emit(e,t){for(const s of t)try{s.apply(null,e)}catch(r){console.warn(r)}}}class w extends Map{constructor(){super(...arguments),this._changeSignal=m(),this.onChange=this._changeSignal.listen,this.emitChange=(e={add:[],delete:[]})=>this._changeSignal.emit(e)}set(e,t,s=!0){return(this.has(e)&&this.get(e)===t)===!1&&(super.set(e,t),s&&this._changeSignal.emit({add:[e],delete:[]})),this}delete(e,t=!0){return super.delete(e)?(t&&this._changeSignal.emit({add:[],delete:[e]}),!0):!1}clear(){this.size!==0&&(super.clear(),this._changeSignal.emit({add:[],delete:[...this.keys()]}))}reset(){this._changeSignal.clear(),this.clear()}}const v=n=>n instanceof Object&&typeof n.then=="function";class c{constructor(){this.is_resolved=!1,this.is_rejected=!1,this.is_finished=!1,this.promise=new Promise((e,t)=>{this.resolve=s=>{try{v(s)?s.then(this.resolve,this.reject):(this.is_resolved=!0,this.is_finished=!0,e(this.value=s),this._runThen(),this._innerFinallyArg=Object.freeze({status:"resolved",result:this.value}),this._runFinally())}catch(r){this.reject(r)}},this.reject=s=>{this.is_rejected=!0,this.is_finished=!0,t(this.reason=s),this._runCatch(),this._innerFinallyArg=Object.freeze({status:"rejected",reason:this.reason}),this._runFinally()}})}static resolve(e){const t=new c;return t.resolve(e),t}static reject(e){const t=new c;return t.reject(e),t}static sleep(e){const t=new c;let s=setTimeout(()=>{s=void 0,t.resolve()},e);return t.onFinished(()=>s!==void 0&&clearTimeout(s)),t}onSuccess(e){this.is_resolved?this.__callInnerThen(e):(this._innerThen||(this._innerThen=[])).push(e)}onError(e){this.is_rejected?this.__callInnerCatch(e):(this._innerCatch||(this._innerCatch=[])).push(e)}onFinished(e){this.is_finished?this.__callInnerFinally(e):(this._innerFinally||(this._innerFinally=[])).push(e)}_runFinally(){if(this._innerFinally){for(const e of this._innerFinally)this.__callInnerFinally(e);this._innerFinally=void 0}}__callInnerFinally(e){queueMicrotask(async()=>{try{await e(this._innerFinallyArg)}catch(t){console.error("Unhandled promise rejection when running onFinished",e,t)}})}_runThen(){if(this._innerThen){for(const e of this._innerThen)this.__callInnerThen(e);this._innerThen=void 0}}_runCatch(){if(this._innerCatch){for(const e of this._innerCatch)this.__callInnerCatch(e);this._innerCatch=void 0}}__callInnerThen(e){queueMicrotask(async()=>{try{await e(this.value)}catch(t){console.error("Unhandled promise rejection when running onSuccess",e,t)}})}__callInnerCatch(e){queueMicrotask(async()=>{try{await e(this.value)}catch(t){console.error("Unhandled promise rejection when running onError",e,t)}})}}const h=new w;let b=0;const A=()=>b++,L=async(n,e,t,s,r=new URL(n).hostname,i)=>{const l=A(),d=URL.createObjectURL(new Blob([`import("${n}")
        .then(
          async({installEnv,Metadata})=>{
            void installEnv(new Metadata(${e},${t}), ${i});
            postMessage("ready")
          },
          (err)=>postMessage("ERROR:"+err)
        )`],{type:"text/javascript"})),a=new Worker(d,{type:"module",name:r});await new Promise((u,g)=>{a.addEventListener("message",f=>{f.data==="ready"?u():g(f.data)},{once:!0})}),a.postMessage(["fetch-ipc-channel",s],[s]);const o=new c,_=u=>{Array.isArray(u.data)&&u.data[0]==="env-ready"&&o.resolve()};return a.addEventListener("message",_),await o.promise,a.removeEventListener("message",_),h.set(l,{worker:a,fetch_port:s,env_script_url:n}),{process_id:l}},S=async(n,e,t,s="{}")=>{const r=p(n),i=JSON.parse(e),l=JSON.parse(s);r.worker.postMessage([`ipc-connect/${i.mmid}`,i,l],[t]);const d=new c,a=o=>{Array.isArray(o.data)&&o.data[0]==="ipc-connect-ready"&&o.data[1]===i.mmid&&d.resolve()};r.worker.addEventListener("message",a),await d.promise,r.worker.removeEventListener("message",a)},p=n=>{const e=h.get(n);if(e===void 0)throw new Error(`no found worker by id: ${n}`);return e},j=(n,e)=>{p(n).worker.postMessage(["run-main",e])},F=n=>{const e=h.get(n);return e===void 0?!1:(e.worker.terminate(),h.delete(n),!0)},M={createProcess:L,runProcessMain:j,createIpc:S,destroyProcess:F};Object.assign(globalThis,M);const C=String.raw;h.onChange(()=>{let n="";for(const[e,t]of h)n+=C`<div>
      <span>PID:${e}</span>
      <span>URL:${t.env_script_url}</span>
    </div>`;document.body.innerHTML=n});
